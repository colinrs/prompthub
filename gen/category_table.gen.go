// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/colinrs/prompthub/model"
)

func newCategoryTable(db *gorm.DB, opts ...gen.DOOption) categoryTable {
	_categoryTable := categoryTable{}

	_categoryTable.categoryTableDo.UseDB(db, opts...)
	_categoryTable.categoryTableDo.UseModel(&model.CategoryTable{})

	tableName := _categoryTable.categoryTableDo.TableName()
	_categoryTable.ALL = field.NewAsterisk(tableName)
	_categoryTable.ID = field.NewInt32(tableName, "id")
	_categoryTable.CategoryName = field.NewString(tableName, "category_name")
	_categoryTable.Color = field.NewString(tableName, "color")
	_categoryTable.CategoryStatus = field.NewInt32(tableName, "category_status")
	_categoryTable.Description = field.NewString(tableName, "description")
	_categoryTable.CreatedBy = field.NewString(tableName, "created_by")
	_categoryTable.CreatedAt = field.NewTime(tableName, "created_at")
	_categoryTable.UpdatedAt = field.NewTime(tableName, "updated_at")
	_categoryTable.DeletedAt = field.NewField(tableName, "deleted_at")

	_categoryTable.fillFieldMap()

	return _categoryTable
}

type categoryTable struct {
	categoryTableDo

	ALL            field.Asterisk
	ID             field.Int32
	CategoryName   field.String
	Color          field.String
	CategoryStatus field.Int32
	Description    field.String
	CreatedBy      field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field

	fieldMap map[string]field.Expr
}

func (c categoryTable) Table(newTableName string) *categoryTable {
	c.categoryTableDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c categoryTable) As(alias string) *categoryTable {
	c.categoryTableDo.DO = *(c.categoryTableDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *categoryTable) updateTableName(table string) *categoryTable {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.CategoryName = field.NewString(table, "category_name")
	c.Color = field.NewString(table, "color")
	c.CategoryStatus = field.NewInt32(table, "category_status")
	c.Description = field.NewString(table, "description")
	c.CreatedBy = field.NewString(table, "created_by")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *categoryTable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *categoryTable) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["category_name"] = c.CategoryName
	c.fieldMap["color"] = c.Color
	c.fieldMap["category_status"] = c.CategoryStatus
	c.fieldMap["description"] = c.Description
	c.fieldMap["created_by"] = c.CreatedBy
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c categoryTable) clone(db *gorm.DB) categoryTable {
	c.categoryTableDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c categoryTable) replaceDB(db *gorm.DB) categoryTable {
	c.categoryTableDo.ReplaceDB(db)
	return c
}

type categoryTableDo struct{ gen.DO }

type ICategoryTableDo interface {
	gen.SubQuery
	Debug() ICategoryTableDo
	WithContext(ctx context.Context) ICategoryTableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICategoryTableDo
	WriteDB() ICategoryTableDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICategoryTableDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICategoryTableDo
	Not(conds ...gen.Condition) ICategoryTableDo
	Or(conds ...gen.Condition) ICategoryTableDo
	Select(conds ...field.Expr) ICategoryTableDo
	Where(conds ...gen.Condition) ICategoryTableDo
	Order(conds ...field.Expr) ICategoryTableDo
	Distinct(cols ...field.Expr) ICategoryTableDo
	Omit(cols ...field.Expr) ICategoryTableDo
	Join(table schema.Tabler, on ...field.Expr) ICategoryTableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICategoryTableDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICategoryTableDo
	Group(cols ...field.Expr) ICategoryTableDo
	Having(conds ...gen.Condition) ICategoryTableDo
	Limit(limit int) ICategoryTableDo
	Offset(offset int) ICategoryTableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICategoryTableDo
	Unscoped() ICategoryTableDo
	Create(values ...*model.CategoryTable) error
	CreateInBatches(values []*model.CategoryTable, batchSize int) error
	Save(values ...*model.CategoryTable) error
	First() (*model.CategoryTable, error)
	Take() (*model.CategoryTable, error)
	Last() (*model.CategoryTable, error)
	Find() ([]*model.CategoryTable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CategoryTable, err error)
	FindInBatches(result *[]*model.CategoryTable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CategoryTable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICategoryTableDo
	Assign(attrs ...field.AssignExpr) ICategoryTableDo
	Joins(fields ...field.RelationField) ICategoryTableDo
	Preload(fields ...field.RelationField) ICategoryTableDo
	FirstOrInit() (*model.CategoryTable, error)
	FirstOrCreate() (*model.CategoryTable, error)
	FindByPage(offset int, limit int) (result []*model.CategoryTable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICategoryTableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c categoryTableDo) Debug() ICategoryTableDo {
	return c.withDO(c.DO.Debug())
}

func (c categoryTableDo) WithContext(ctx context.Context) ICategoryTableDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c categoryTableDo) ReadDB() ICategoryTableDo {
	return c.Clauses(dbresolver.Read)
}

func (c categoryTableDo) WriteDB() ICategoryTableDo {
	return c.Clauses(dbresolver.Write)
}

func (c categoryTableDo) Session(config *gorm.Session) ICategoryTableDo {
	return c.withDO(c.DO.Session(config))
}

func (c categoryTableDo) Clauses(conds ...clause.Expression) ICategoryTableDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c categoryTableDo) Returning(value interface{}, columns ...string) ICategoryTableDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c categoryTableDo) Not(conds ...gen.Condition) ICategoryTableDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c categoryTableDo) Or(conds ...gen.Condition) ICategoryTableDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c categoryTableDo) Select(conds ...field.Expr) ICategoryTableDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c categoryTableDo) Where(conds ...gen.Condition) ICategoryTableDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c categoryTableDo) Order(conds ...field.Expr) ICategoryTableDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c categoryTableDo) Distinct(cols ...field.Expr) ICategoryTableDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c categoryTableDo) Omit(cols ...field.Expr) ICategoryTableDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c categoryTableDo) Join(table schema.Tabler, on ...field.Expr) ICategoryTableDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c categoryTableDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICategoryTableDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c categoryTableDo) RightJoin(table schema.Tabler, on ...field.Expr) ICategoryTableDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c categoryTableDo) Group(cols ...field.Expr) ICategoryTableDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c categoryTableDo) Having(conds ...gen.Condition) ICategoryTableDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c categoryTableDo) Limit(limit int) ICategoryTableDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c categoryTableDo) Offset(offset int) ICategoryTableDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c categoryTableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICategoryTableDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c categoryTableDo) Unscoped() ICategoryTableDo {
	return c.withDO(c.DO.Unscoped())
}

func (c categoryTableDo) Create(values ...*model.CategoryTable) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c categoryTableDo) CreateInBatches(values []*model.CategoryTable, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c categoryTableDo) Save(values ...*model.CategoryTable) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c categoryTableDo) First() (*model.CategoryTable, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CategoryTable), nil
	}
}

func (c categoryTableDo) Take() (*model.CategoryTable, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CategoryTable), nil
	}
}

func (c categoryTableDo) Last() (*model.CategoryTable, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CategoryTable), nil
	}
}

func (c categoryTableDo) Find() ([]*model.CategoryTable, error) {
	result, err := c.DO.Find()
	return result.([]*model.CategoryTable), err
}

func (c categoryTableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CategoryTable, err error) {
	buf := make([]*model.CategoryTable, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c categoryTableDo) FindInBatches(result *[]*model.CategoryTable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c categoryTableDo) Attrs(attrs ...field.AssignExpr) ICategoryTableDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c categoryTableDo) Assign(attrs ...field.AssignExpr) ICategoryTableDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c categoryTableDo) Joins(fields ...field.RelationField) ICategoryTableDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c categoryTableDo) Preload(fields ...field.RelationField) ICategoryTableDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c categoryTableDo) FirstOrInit() (*model.CategoryTable, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CategoryTable), nil
	}
}

func (c categoryTableDo) FirstOrCreate() (*model.CategoryTable, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CategoryTable), nil
	}
}

func (c categoryTableDo) FindByPage(offset int, limit int) (result []*model.CategoryTable, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c categoryTableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c categoryTableDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c categoryTableDo) Delete(models ...*model.CategoryTable) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *categoryTableDo) withDO(do gen.Dao) *categoryTableDo {
	c.DO = *do.(*gen.DO)
	return c
}
