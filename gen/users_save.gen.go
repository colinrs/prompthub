// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/colinrs/prompthub/model"
)

func newUsersSave(db *gorm.DB, opts ...gen.DOOption) usersSave {
	_usersSave := usersSave{}

	_usersSave.usersSaveDo.UseDB(db, opts...)
	_usersSave.usersSaveDo.UseModel(&model.UsersSave{})

	tableName := _usersSave.usersSaveDo.TableName()
	_usersSave.ALL = field.NewAsterisk(tableName)
	_usersSave.ID = field.NewInt32(tableName, "id")
	_usersSave.UserID = field.NewInt32(tableName, "user_id")
	_usersSave.PromptsID = field.NewInt32(tableName, "prompts_id")
	_usersSave.CreatedAt = field.NewTime(tableName, "created_at")
	_usersSave.UpdatedAt = field.NewTime(tableName, "updated_at")
	_usersSave.DeletedAt = field.NewField(tableName, "deleted_at")

	_usersSave.fillFieldMap()

	return _usersSave
}

type usersSave struct {
	usersSaveDo

	ALL       field.Asterisk
	ID        field.Int32
	UserID    field.Int32
	PromptsID field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (u usersSave) Table(newTableName string) *usersSave {
	u.usersSaveDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u usersSave) As(alias string) *usersSave {
	u.usersSaveDo.DO = *(u.usersSaveDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *usersSave) updateTableName(table string) *usersSave {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.UserID = field.NewInt32(table, "user_id")
	u.PromptsID = field.NewInt32(table, "prompts_id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *usersSave) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *usersSave) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["prompts_id"] = u.PromptsID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u usersSave) clone(db *gorm.DB) usersSave {
	u.usersSaveDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u usersSave) replaceDB(db *gorm.DB) usersSave {
	u.usersSaveDo.ReplaceDB(db)
	return u
}

type usersSaveDo struct{ gen.DO }

type IUsersSaveDo interface {
	gen.SubQuery
	Debug() IUsersSaveDo
	WithContext(ctx context.Context) IUsersSaveDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUsersSaveDo
	WriteDB() IUsersSaveDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUsersSaveDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUsersSaveDo
	Not(conds ...gen.Condition) IUsersSaveDo
	Or(conds ...gen.Condition) IUsersSaveDo
	Select(conds ...field.Expr) IUsersSaveDo
	Where(conds ...gen.Condition) IUsersSaveDo
	Order(conds ...field.Expr) IUsersSaveDo
	Distinct(cols ...field.Expr) IUsersSaveDo
	Omit(cols ...field.Expr) IUsersSaveDo
	Join(table schema.Tabler, on ...field.Expr) IUsersSaveDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUsersSaveDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUsersSaveDo
	Group(cols ...field.Expr) IUsersSaveDo
	Having(conds ...gen.Condition) IUsersSaveDo
	Limit(limit int) IUsersSaveDo
	Offset(offset int) IUsersSaveDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersSaveDo
	Unscoped() IUsersSaveDo
	Create(values ...*model.UsersSave) error
	CreateInBatches(values []*model.UsersSave, batchSize int) error
	Save(values ...*model.UsersSave) error
	First() (*model.UsersSave, error)
	Take() (*model.UsersSave, error)
	Last() (*model.UsersSave, error)
	Find() ([]*model.UsersSave, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UsersSave, err error)
	FindInBatches(result *[]*model.UsersSave, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UsersSave) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUsersSaveDo
	Assign(attrs ...field.AssignExpr) IUsersSaveDo
	Joins(fields ...field.RelationField) IUsersSaveDo
	Preload(fields ...field.RelationField) IUsersSaveDo
	FirstOrInit() (*model.UsersSave, error)
	FirstOrCreate() (*model.UsersSave, error)
	FindByPage(offset int, limit int) (result []*model.UsersSave, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUsersSaveDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u usersSaveDo) Debug() IUsersSaveDo {
	return u.withDO(u.DO.Debug())
}

func (u usersSaveDo) WithContext(ctx context.Context) IUsersSaveDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u usersSaveDo) ReadDB() IUsersSaveDo {
	return u.Clauses(dbresolver.Read)
}

func (u usersSaveDo) WriteDB() IUsersSaveDo {
	return u.Clauses(dbresolver.Write)
}

func (u usersSaveDo) Session(config *gorm.Session) IUsersSaveDo {
	return u.withDO(u.DO.Session(config))
}

func (u usersSaveDo) Clauses(conds ...clause.Expression) IUsersSaveDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u usersSaveDo) Returning(value interface{}, columns ...string) IUsersSaveDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u usersSaveDo) Not(conds ...gen.Condition) IUsersSaveDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u usersSaveDo) Or(conds ...gen.Condition) IUsersSaveDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u usersSaveDo) Select(conds ...field.Expr) IUsersSaveDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u usersSaveDo) Where(conds ...gen.Condition) IUsersSaveDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u usersSaveDo) Order(conds ...field.Expr) IUsersSaveDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u usersSaveDo) Distinct(cols ...field.Expr) IUsersSaveDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u usersSaveDo) Omit(cols ...field.Expr) IUsersSaveDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u usersSaveDo) Join(table schema.Tabler, on ...field.Expr) IUsersSaveDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u usersSaveDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUsersSaveDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u usersSaveDo) RightJoin(table schema.Tabler, on ...field.Expr) IUsersSaveDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u usersSaveDo) Group(cols ...field.Expr) IUsersSaveDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u usersSaveDo) Having(conds ...gen.Condition) IUsersSaveDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u usersSaveDo) Limit(limit int) IUsersSaveDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u usersSaveDo) Offset(offset int) IUsersSaveDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u usersSaveDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersSaveDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u usersSaveDo) Unscoped() IUsersSaveDo {
	return u.withDO(u.DO.Unscoped())
}

func (u usersSaveDo) Create(values ...*model.UsersSave) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u usersSaveDo) CreateInBatches(values []*model.UsersSave, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u usersSaveDo) Save(values ...*model.UsersSave) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u usersSaveDo) First() (*model.UsersSave, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersSave), nil
	}
}

func (u usersSaveDo) Take() (*model.UsersSave, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersSave), nil
	}
}

func (u usersSaveDo) Last() (*model.UsersSave, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersSave), nil
	}
}

func (u usersSaveDo) Find() ([]*model.UsersSave, error) {
	result, err := u.DO.Find()
	return result.([]*model.UsersSave), err
}

func (u usersSaveDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UsersSave, err error) {
	buf := make([]*model.UsersSave, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u usersSaveDo) FindInBatches(result *[]*model.UsersSave, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u usersSaveDo) Attrs(attrs ...field.AssignExpr) IUsersSaveDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u usersSaveDo) Assign(attrs ...field.AssignExpr) IUsersSaveDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u usersSaveDo) Joins(fields ...field.RelationField) IUsersSaveDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u usersSaveDo) Preload(fields ...field.RelationField) IUsersSaveDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u usersSaveDo) FirstOrInit() (*model.UsersSave, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersSave), nil
	}
}

func (u usersSaveDo) FirstOrCreate() (*model.UsersSave, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersSave), nil
	}
}

func (u usersSaveDo) FindByPage(offset int, limit int) (result []*model.UsersSave, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u usersSaveDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u usersSaveDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u usersSaveDo) Delete(models ...*model.UsersSave) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *usersSaveDo) withDO(do gen.Dao) *usersSaveDo {
	u.DO = *do.(*gen.DO)
	return u
}
