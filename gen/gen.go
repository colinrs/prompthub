// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                 = new(Query)
	CategoryTable     *categoryTable
	PromptsCountTable *promptsCountTable
	PromptsTable      *promptsTable
	UsersTable        *usersTable
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	CategoryTable = &Q.CategoryTable
	PromptsCountTable = &Q.PromptsCountTable
	PromptsTable = &Q.PromptsTable
	UsersTable = &Q.UsersTable
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                db,
		CategoryTable:     newCategoryTable(db, opts...),
		PromptsCountTable: newPromptsCountTable(db, opts...),
		PromptsTable:      newPromptsTable(db, opts...),
		UsersTable:        newUsersTable(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	CategoryTable     categoryTable
	PromptsCountTable promptsCountTable
	PromptsTable      promptsTable
	UsersTable        usersTable
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		CategoryTable:     q.CategoryTable.clone(db),
		PromptsCountTable: q.PromptsCountTable.clone(db),
		PromptsTable:      q.PromptsTable.clone(db),
		UsersTable:        q.UsersTable.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		CategoryTable:     q.CategoryTable.replaceDB(db),
		PromptsCountTable: q.PromptsCountTable.replaceDB(db),
		PromptsTable:      q.PromptsTable.replaceDB(db),
		UsersTable:        q.UsersTable.replaceDB(db),
	}
}

type queryCtx struct {
	CategoryTable     ICategoryTableDo
	PromptsCountTable IPromptsCountTableDo
	PromptsTable      IPromptsTableDo
	UsersTable        IUsersTableDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CategoryTable:     q.CategoryTable.WithContext(ctx),
		PromptsCountTable: q.PromptsCountTable.WithContext(ctx),
		PromptsTable:      q.PromptsTable.WithContext(ctx),
		UsersTable:        q.UsersTable.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
