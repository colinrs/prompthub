// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/colinrs/prompthub/model"
)

func newUsersLike(db *gorm.DB, opts ...gen.DOOption) usersLike {
	_usersLike := usersLike{}

	_usersLike.usersLikeDo.UseDB(db, opts...)
	_usersLike.usersLikeDo.UseModel(&model.UsersLike{})

	tableName := _usersLike.usersLikeDo.TableName()
	_usersLike.ALL = field.NewAsterisk(tableName)
	_usersLike.ID = field.NewInt32(tableName, "id")
	_usersLike.UserID = field.NewInt32(tableName, "user_id")
	_usersLike.PromptsID = field.NewInt32(tableName, "prompts_id")
	_usersLike.CreatedAt = field.NewTime(tableName, "created_at")
	_usersLike.UpdatedAt = field.NewTime(tableName, "updated_at")
	_usersLike.DeletedAt = field.NewField(tableName, "deleted_at")

	_usersLike.fillFieldMap()

	return _usersLike
}

type usersLike struct {
	usersLikeDo

	ALL       field.Asterisk
	ID        field.Int32
	UserID    field.Int32
	PromptsID field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (u usersLike) Table(newTableName string) *usersLike {
	u.usersLikeDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u usersLike) As(alias string) *usersLike {
	u.usersLikeDo.DO = *(u.usersLikeDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *usersLike) updateTableName(table string) *usersLike {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.UserID = field.NewInt32(table, "user_id")
	u.PromptsID = field.NewInt32(table, "prompts_id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *usersLike) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *usersLike) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["prompts_id"] = u.PromptsID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u usersLike) clone(db *gorm.DB) usersLike {
	u.usersLikeDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u usersLike) replaceDB(db *gorm.DB) usersLike {
	u.usersLikeDo.ReplaceDB(db)
	return u
}

type usersLikeDo struct{ gen.DO }

type IUsersLikeDo interface {
	gen.SubQuery
	Debug() IUsersLikeDo
	WithContext(ctx context.Context) IUsersLikeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUsersLikeDo
	WriteDB() IUsersLikeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUsersLikeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUsersLikeDo
	Not(conds ...gen.Condition) IUsersLikeDo
	Or(conds ...gen.Condition) IUsersLikeDo
	Select(conds ...field.Expr) IUsersLikeDo
	Where(conds ...gen.Condition) IUsersLikeDo
	Order(conds ...field.Expr) IUsersLikeDo
	Distinct(cols ...field.Expr) IUsersLikeDo
	Omit(cols ...field.Expr) IUsersLikeDo
	Join(table schema.Tabler, on ...field.Expr) IUsersLikeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUsersLikeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUsersLikeDo
	Group(cols ...field.Expr) IUsersLikeDo
	Having(conds ...gen.Condition) IUsersLikeDo
	Limit(limit int) IUsersLikeDo
	Offset(offset int) IUsersLikeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersLikeDo
	Unscoped() IUsersLikeDo
	Create(values ...*model.UsersLike) error
	CreateInBatches(values []*model.UsersLike, batchSize int) error
	Save(values ...*model.UsersLike) error
	First() (*model.UsersLike, error)
	Take() (*model.UsersLike, error)
	Last() (*model.UsersLike, error)
	Find() ([]*model.UsersLike, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UsersLike, err error)
	FindInBatches(result *[]*model.UsersLike, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UsersLike) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUsersLikeDo
	Assign(attrs ...field.AssignExpr) IUsersLikeDo
	Joins(fields ...field.RelationField) IUsersLikeDo
	Preload(fields ...field.RelationField) IUsersLikeDo
	FirstOrInit() (*model.UsersLike, error)
	FirstOrCreate() (*model.UsersLike, error)
	FindByPage(offset int, limit int) (result []*model.UsersLike, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUsersLikeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u usersLikeDo) Debug() IUsersLikeDo {
	return u.withDO(u.DO.Debug())
}

func (u usersLikeDo) WithContext(ctx context.Context) IUsersLikeDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u usersLikeDo) ReadDB() IUsersLikeDo {
	return u.Clauses(dbresolver.Read)
}

func (u usersLikeDo) WriteDB() IUsersLikeDo {
	return u.Clauses(dbresolver.Write)
}

func (u usersLikeDo) Session(config *gorm.Session) IUsersLikeDo {
	return u.withDO(u.DO.Session(config))
}

func (u usersLikeDo) Clauses(conds ...clause.Expression) IUsersLikeDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u usersLikeDo) Returning(value interface{}, columns ...string) IUsersLikeDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u usersLikeDo) Not(conds ...gen.Condition) IUsersLikeDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u usersLikeDo) Or(conds ...gen.Condition) IUsersLikeDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u usersLikeDo) Select(conds ...field.Expr) IUsersLikeDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u usersLikeDo) Where(conds ...gen.Condition) IUsersLikeDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u usersLikeDo) Order(conds ...field.Expr) IUsersLikeDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u usersLikeDo) Distinct(cols ...field.Expr) IUsersLikeDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u usersLikeDo) Omit(cols ...field.Expr) IUsersLikeDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u usersLikeDo) Join(table schema.Tabler, on ...field.Expr) IUsersLikeDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u usersLikeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUsersLikeDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u usersLikeDo) RightJoin(table schema.Tabler, on ...field.Expr) IUsersLikeDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u usersLikeDo) Group(cols ...field.Expr) IUsersLikeDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u usersLikeDo) Having(conds ...gen.Condition) IUsersLikeDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u usersLikeDo) Limit(limit int) IUsersLikeDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u usersLikeDo) Offset(offset int) IUsersLikeDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u usersLikeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersLikeDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u usersLikeDo) Unscoped() IUsersLikeDo {
	return u.withDO(u.DO.Unscoped())
}

func (u usersLikeDo) Create(values ...*model.UsersLike) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u usersLikeDo) CreateInBatches(values []*model.UsersLike, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u usersLikeDo) Save(values ...*model.UsersLike) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u usersLikeDo) First() (*model.UsersLike, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersLike), nil
	}
}

func (u usersLikeDo) Take() (*model.UsersLike, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersLike), nil
	}
}

func (u usersLikeDo) Last() (*model.UsersLike, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersLike), nil
	}
}

func (u usersLikeDo) Find() ([]*model.UsersLike, error) {
	result, err := u.DO.Find()
	return result.([]*model.UsersLike), err
}

func (u usersLikeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UsersLike, err error) {
	buf := make([]*model.UsersLike, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u usersLikeDo) FindInBatches(result *[]*model.UsersLike, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u usersLikeDo) Attrs(attrs ...field.AssignExpr) IUsersLikeDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u usersLikeDo) Assign(attrs ...field.AssignExpr) IUsersLikeDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u usersLikeDo) Joins(fields ...field.RelationField) IUsersLikeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u usersLikeDo) Preload(fields ...field.RelationField) IUsersLikeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u usersLikeDo) FirstOrInit() (*model.UsersLike, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersLike), nil
	}
}

func (u usersLikeDo) FirstOrCreate() (*model.UsersLike, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersLike), nil
	}
}

func (u usersLikeDo) FindByPage(offset int, limit int) (result []*model.UsersLike, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u usersLikeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u usersLikeDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u usersLikeDo) Delete(models ...*model.UsersLike) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *usersLikeDo) withDO(do gen.Dao) *usersLikeDo {
	u.DO = *do.(*gen.DO)
	return u
}
