// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/colinrs/prompthub/model"
)

func newPromptsTable(db *gorm.DB, opts ...gen.DOOption) promptsTable {
	_promptsTable := promptsTable{}

	_promptsTable.promptsTableDo.UseDB(db, opts...)
	_promptsTable.promptsTableDo.UseModel(&model.PromptsTable{})

	tableName := _promptsTable.promptsTableDo.TableName()
	_promptsTable.ALL = field.NewAsterisk(tableName)
	_promptsTable.ID = field.NewInt32(tableName, "id")
	_promptsTable.Title = field.NewString(tableName, "title")
	_promptsTable.Content = field.NewString(tableName, "content")
	_promptsTable.Category = field.NewString(tableName, "category")
	_promptsTable.PromptsStatus = field.NewInt32(tableName, "prompts_status")
	_promptsTable.CreatedBy = field.NewString(tableName, "created_by")
	_promptsTable.CreatedAt = field.NewTime(tableName, "created_at")
	_promptsTable.UpdatedAt = field.NewTime(tableName, "updated_at")
	_promptsTable.DeletedAt = field.NewField(tableName, "deleted_at")

	_promptsTable.fillFieldMap()

	return _promptsTable
}

type promptsTable struct {
	promptsTableDo

	ALL           field.Asterisk
	ID            field.Int32
	Title         field.String
	Content       field.String
	Category      field.String
	PromptsStatus field.Int32
	CreatedBy     field.String
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field

	fieldMap map[string]field.Expr
}

func (p promptsTable) Table(newTableName string) *promptsTable {
	p.promptsTableDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promptsTable) As(alias string) *promptsTable {
	p.promptsTableDo.DO = *(p.promptsTableDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promptsTable) updateTableName(table string) *promptsTable {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.Title = field.NewString(table, "title")
	p.Content = field.NewString(table, "content")
	p.Category = field.NewString(table, "category")
	p.PromptsStatus = field.NewInt32(table, "prompts_status")
	p.CreatedBy = field.NewString(table, "created_by")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *promptsTable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promptsTable) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["title"] = p.Title
	p.fieldMap["content"] = p.Content
	p.fieldMap["category"] = p.Category
	p.fieldMap["prompts_status"] = p.PromptsStatus
	p.fieldMap["created_by"] = p.CreatedBy
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p promptsTable) clone(db *gorm.DB) promptsTable {
	p.promptsTableDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promptsTable) replaceDB(db *gorm.DB) promptsTable {
	p.promptsTableDo.ReplaceDB(db)
	return p
}

type promptsTableDo struct{ gen.DO }

type IPromptsTableDo interface {
	gen.SubQuery
	Debug() IPromptsTableDo
	WithContext(ctx context.Context) IPromptsTableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPromptsTableDo
	WriteDB() IPromptsTableDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPromptsTableDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPromptsTableDo
	Not(conds ...gen.Condition) IPromptsTableDo
	Or(conds ...gen.Condition) IPromptsTableDo
	Select(conds ...field.Expr) IPromptsTableDo
	Where(conds ...gen.Condition) IPromptsTableDo
	Order(conds ...field.Expr) IPromptsTableDo
	Distinct(cols ...field.Expr) IPromptsTableDo
	Omit(cols ...field.Expr) IPromptsTableDo
	Join(table schema.Tabler, on ...field.Expr) IPromptsTableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPromptsTableDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPromptsTableDo
	Group(cols ...field.Expr) IPromptsTableDo
	Having(conds ...gen.Condition) IPromptsTableDo
	Limit(limit int) IPromptsTableDo
	Offset(offset int) IPromptsTableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPromptsTableDo
	Unscoped() IPromptsTableDo
	Create(values ...*model.PromptsTable) error
	CreateInBatches(values []*model.PromptsTable, batchSize int) error
	Save(values ...*model.PromptsTable) error
	First() (*model.PromptsTable, error)
	Take() (*model.PromptsTable, error)
	Last() (*model.PromptsTable, error)
	Find() ([]*model.PromptsTable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromptsTable, err error)
	FindInBatches(result *[]*model.PromptsTable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PromptsTable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPromptsTableDo
	Assign(attrs ...field.AssignExpr) IPromptsTableDo
	Joins(fields ...field.RelationField) IPromptsTableDo
	Preload(fields ...field.RelationField) IPromptsTableDo
	FirstOrInit() (*model.PromptsTable, error)
	FirstOrCreate() (*model.PromptsTable, error)
	FindByPage(offset int, limit int) (result []*model.PromptsTable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPromptsTableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p promptsTableDo) Debug() IPromptsTableDo {
	return p.withDO(p.DO.Debug())
}

func (p promptsTableDo) WithContext(ctx context.Context) IPromptsTableDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promptsTableDo) ReadDB() IPromptsTableDo {
	return p.Clauses(dbresolver.Read)
}

func (p promptsTableDo) WriteDB() IPromptsTableDo {
	return p.Clauses(dbresolver.Write)
}

func (p promptsTableDo) Session(config *gorm.Session) IPromptsTableDo {
	return p.withDO(p.DO.Session(config))
}

func (p promptsTableDo) Clauses(conds ...clause.Expression) IPromptsTableDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promptsTableDo) Returning(value interface{}, columns ...string) IPromptsTableDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promptsTableDo) Not(conds ...gen.Condition) IPromptsTableDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promptsTableDo) Or(conds ...gen.Condition) IPromptsTableDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promptsTableDo) Select(conds ...field.Expr) IPromptsTableDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promptsTableDo) Where(conds ...gen.Condition) IPromptsTableDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promptsTableDo) Order(conds ...field.Expr) IPromptsTableDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promptsTableDo) Distinct(cols ...field.Expr) IPromptsTableDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promptsTableDo) Omit(cols ...field.Expr) IPromptsTableDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promptsTableDo) Join(table schema.Tabler, on ...field.Expr) IPromptsTableDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promptsTableDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPromptsTableDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promptsTableDo) RightJoin(table schema.Tabler, on ...field.Expr) IPromptsTableDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promptsTableDo) Group(cols ...field.Expr) IPromptsTableDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promptsTableDo) Having(conds ...gen.Condition) IPromptsTableDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promptsTableDo) Limit(limit int) IPromptsTableDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promptsTableDo) Offset(offset int) IPromptsTableDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promptsTableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPromptsTableDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promptsTableDo) Unscoped() IPromptsTableDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promptsTableDo) Create(values ...*model.PromptsTable) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promptsTableDo) CreateInBatches(values []*model.PromptsTable, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promptsTableDo) Save(values ...*model.PromptsTable) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promptsTableDo) First() (*model.PromptsTable, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptsTable), nil
	}
}

func (p promptsTableDo) Take() (*model.PromptsTable, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptsTable), nil
	}
}

func (p promptsTableDo) Last() (*model.PromptsTable, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptsTable), nil
	}
}

func (p promptsTableDo) Find() ([]*model.PromptsTable, error) {
	result, err := p.DO.Find()
	return result.([]*model.PromptsTable), err
}

func (p promptsTableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromptsTable, err error) {
	buf := make([]*model.PromptsTable, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promptsTableDo) FindInBatches(result *[]*model.PromptsTable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promptsTableDo) Attrs(attrs ...field.AssignExpr) IPromptsTableDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promptsTableDo) Assign(attrs ...field.AssignExpr) IPromptsTableDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promptsTableDo) Joins(fields ...field.RelationField) IPromptsTableDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promptsTableDo) Preload(fields ...field.RelationField) IPromptsTableDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promptsTableDo) FirstOrInit() (*model.PromptsTable, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptsTable), nil
	}
}

func (p promptsTableDo) FirstOrCreate() (*model.PromptsTable, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptsTable), nil
	}
}

func (p promptsTableDo) FindByPage(offset int, limit int) (result []*model.PromptsTable, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promptsTableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promptsTableDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promptsTableDo) Delete(models ...*model.PromptsTable) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promptsTableDo) withDO(do gen.Dao) *promptsTableDo {
	p.DO = *do.(*gen.DO)
	return p
}
