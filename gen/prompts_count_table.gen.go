// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/colinrs/prompthub/model"
)

func newPromptsCountTable(db *gorm.DB, opts ...gen.DOOption) promptsCountTable {
	_promptsCountTable := promptsCountTable{}

	_promptsCountTable.promptsCountTableDo.UseDB(db, opts...)
	_promptsCountTable.promptsCountTableDo.UseModel(&model.PromptsCountTable{})

	tableName := _promptsCountTable.promptsCountTableDo.TableName()
	_promptsCountTable.ALL = field.NewAsterisk(tableName)
	_promptsCountTable.ID = field.NewInt32(tableName, "id")
	_promptsCountTable.PromptsID = field.NewInt32(tableName, "prompts_id")
	_promptsCountTable.LikeCount = field.NewInt32(tableName, "like_count")
	_promptsCountTable.ReviewCount = field.NewInt32(tableName, "review_count")
	_promptsCountTable.CreatedAt = field.NewTime(tableName, "created_at")
	_promptsCountTable.UpdatedAt = field.NewTime(tableName, "updated_at")
	_promptsCountTable.DeletedAt = field.NewField(tableName, "deleted_at")

	_promptsCountTable.fillFieldMap()

	return _promptsCountTable
}

type promptsCountTable struct {
	promptsCountTableDo

	ALL         field.Asterisk
	ID          field.Int32
	PromptsID   field.Int32
	LikeCount   field.Int32
	ReviewCount field.Int32
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (p promptsCountTable) Table(newTableName string) *promptsCountTable {
	p.promptsCountTableDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promptsCountTable) As(alias string) *promptsCountTable {
	p.promptsCountTableDo.DO = *(p.promptsCountTableDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promptsCountTable) updateTableName(table string) *promptsCountTable {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.PromptsID = field.NewInt32(table, "prompts_id")
	p.LikeCount = field.NewInt32(table, "like_count")
	p.ReviewCount = field.NewInt32(table, "review_count")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *promptsCountTable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promptsCountTable) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["prompts_id"] = p.PromptsID
	p.fieldMap["like_count"] = p.LikeCount
	p.fieldMap["review_count"] = p.ReviewCount
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p promptsCountTable) clone(db *gorm.DB) promptsCountTable {
	p.promptsCountTableDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promptsCountTable) replaceDB(db *gorm.DB) promptsCountTable {
	p.promptsCountTableDo.ReplaceDB(db)
	return p
}

type promptsCountTableDo struct{ gen.DO }

type IPromptsCountTableDo interface {
	gen.SubQuery
	Debug() IPromptsCountTableDo
	WithContext(ctx context.Context) IPromptsCountTableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPromptsCountTableDo
	WriteDB() IPromptsCountTableDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPromptsCountTableDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPromptsCountTableDo
	Not(conds ...gen.Condition) IPromptsCountTableDo
	Or(conds ...gen.Condition) IPromptsCountTableDo
	Select(conds ...field.Expr) IPromptsCountTableDo
	Where(conds ...gen.Condition) IPromptsCountTableDo
	Order(conds ...field.Expr) IPromptsCountTableDo
	Distinct(cols ...field.Expr) IPromptsCountTableDo
	Omit(cols ...field.Expr) IPromptsCountTableDo
	Join(table schema.Tabler, on ...field.Expr) IPromptsCountTableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPromptsCountTableDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPromptsCountTableDo
	Group(cols ...field.Expr) IPromptsCountTableDo
	Having(conds ...gen.Condition) IPromptsCountTableDo
	Limit(limit int) IPromptsCountTableDo
	Offset(offset int) IPromptsCountTableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPromptsCountTableDo
	Unscoped() IPromptsCountTableDo
	Create(values ...*model.PromptsCountTable) error
	CreateInBatches(values []*model.PromptsCountTable, batchSize int) error
	Save(values ...*model.PromptsCountTable) error
	First() (*model.PromptsCountTable, error)
	Take() (*model.PromptsCountTable, error)
	Last() (*model.PromptsCountTable, error)
	Find() ([]*model.PromptsCountTable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromptsCountTable, err error)
	FindInBatches(result *[]*model.PromptsCountTable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PromptsCountTable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPromptsCountTableDo
	Assign(attrs ...field.AssignExpr) IPromptsCountTableDo
	Joins(fields ...field.RelationField) IPromptsCountTableDo
	Preload(fields ...field.RelationField) IPromptsCountTableDo
	FirstOrInit() (*model.PromptsCountTable, error)
	FirstOrCreate() (*model.PromptsCountTable, error)
	FindByPage(offset int, limit int) (result []*model.PromptsCountTable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPromptsCountTableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p promptsCountTableDo) Debug() IPromptsCountTableDo {
	return p.withDO(p.DO.Debug())
}

func (p promptsCountTableDo) WithContext(ctx context.Context) IPromptsCountTableDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promptsCountTableDo) ReadDB() IPromptsCountTableDo {
	return p.Clauses(dbresolver.Read)
}

func (p promptsCountTableDo) WriteDB() IPromptsCountTableDo {
	return p.Clauses(dbresolver.Write)
}

func (p promptsCountTableDo) Session(config *gorm.Session) IPromptsCountTableDo {
	return p.withDO(p.DO.Session(config))
}

func (p promptsCountTableDo) Clauses(conds ...clause.Expression) IPromptsCountTableDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promptsCountTableDo) Returning(value interface{}, columns ...string) IPromptsCountTableDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promptsCountTableDo) Not(conds ...gen.Condition) IPromptsCountTableDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promptsCountTableDo) Or(conds ...gen.Condition) IPromptsCountTableDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promptsCountTableDo) Select(conds ...field.Expr) IPromptsCountTableDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promptsCountTableDo) Where(conds ...gen.Condition) IPromptsCountTableDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promptsCountTableDo) Order(conds ...field.Expr) IPromptsCountTableDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promptsCountTableDo) Distinct(cols ...field.Expr) IPromptsCountTableDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promptsCountTableDo) Omit(cols ...field.Expr) IPromptsCountTableDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promptsCountTableDo) Join(table schema.Tabler, on ...field.Expr) IPromptsCountTableDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promptsCountTableDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPromptsCountTableDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promptsCountTableDo) RightJoin(table schema.Tabler, on ...field.Expr) IPromptsCountTableDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promptsCountTableDo) Group(cols ...field.Expr) IPromptsCountTableDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promptsCountTableDo) Having(conds ...gen.Condition) IPromptsCountTableDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promptsCountTableDo) Limit(limit int) IPromptsCountTableDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promptsCountTableDo) Offset(offset int) IPromptsCountTableDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promptsCountTableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPromptsCountTableDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promptsCountTableDo) Unscoped() IPromptsCountTableDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promptsCountTableDo) Create(values ...*model.PromptsCountTable) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promptsCountTableDo) CreateInBatches(values []*model.PromptsCountTable, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promptsCountTableDo) Save(values ...*model.PromptsCountTable) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promptsCountTableDo) First() (*model.PromptsCountTable, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptsCountTable), nil
	}
}

func (p promptsCountTableDo) Take() (*model.PromptsCountTable, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptsCountTable), nil
	}
}

func (p promptsCountTableDo) Last() (*model.PromptsCountTable, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptsCountTable), nil
	}
}

func (p promptsCountTableDo) Find() ([]*model.PromptsCountTable, error) {
	result, err := p.DO.Find()
	return result.([]*model.PromptsCountTable), err
}

func (p promptsCountTableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromptsCountTable, err error) {
	buf := make([]*model.PromptsCountTable, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promptsCountTableDo) FindInBatches(result *[]*model.PromptsCountTable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promptsCountTableDo) Attrs(attrs ...field.AssignExpr) IPromptsCountTableDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promptsCountTableDo) Assign(attrs ...field.AssignExpr) IPromptsCountTableDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promptsCountTableDo) Joins(fields ...field.RelationField) IPromptsCountTableDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promptsCountTableDo) Preload(fields ...field.RelationField) IPromptsCountTableDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promptsCountTableDo) FirstOrInit() (*model.PromptsCountTable, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptsCountTable), nil
	}
}

func (p promptsCountTableDo) FirstOrCreate() (*model.PromptsCountTable, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptsCountTable), nil
	}
}

func (p promptsCountTableDo) FindByPage(offset int, limit int) (result []*model.PromptsCountTable, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promptsCountTableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promptsCountTableDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promptsCountTableDo) Delete(models ...*model.PromptsCountTable) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promptsCountTableDo) withDO(do gen.Dao) *promptsCountTableDo {
	p.DO = *do.(*gen.DO)
	return p
}
