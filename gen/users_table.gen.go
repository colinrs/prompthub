// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/colinrs/prompthub/model"
)

func newUsersTable(db *gorm.DB, opts ...gen.DOOption) usersTable {
	_usersTable := usersTable{}

	_usersTable.usersTableDo.UseDB(db, opts...)
	_usersTable.usersTableDo.UseModel(&model.UsersTable{})

	tableName := _usersTable.usersTableDo.TableName()
	_usersTable.ALL = field.NewAsterisk(tableName)
	_usersTable.ID = field.NewInt32(tableName, "id")
	_usersTable.UserName = field.NewString(tableName, "user_name")
	_usersTable.Password = field.NewString(tableName, "password")
	_usersTable.Email = field.NewString(tableName, "email")
	_usersTable.UserStatus = field.NewInt32(tableName, "user_status")
	_usersTable.Avatar = field.NewString(tableName, "avatar")
	_usersTable.Description = field.NewString(tableName, "description")
	_usersTable.CreatedAt = field.NewTime(tableName, "created_at")
	_usersTable.UpdatedAt = field.NewTime(tableName, "updated_at")
	_usersTable.DeletedAt = field.NewField(tableName, "deleted_at")

	_usersTable.fillFieldMap()

	return _usersTable
}

type usersTable struct {
	usersTableDo

	ALL         field.Asterisk
	ID          field.Int32
	UserName    field.String
	Password    field.String
	Email       field.String
	UserStatus  field.Int32
	Avatar      field.String
	Description field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (u usersTable) Table(newTableName string) *usersTable {
	u.usersTableDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u usersTable) As(alias string) *usersTable {
	u.usersTableDo.DO = *(u.usersTableDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *usersTable) updateTableName(table string) *usersTable {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.UserName = field.NewString(table, "user_name")
	u.Password = field.NewString(table, "password")
	u.Email = field.NewString(table, "email")
	u.UserStatus = field.NewInt32(table, "user_status")
	u.Avatar = field.NewString(table, "avatar")
	u.Description = field.NewString(table, "description")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *usersTable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *usersTable) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_name"] = u.UserName
	u.fieldMap["password"] = u.Password
	u.fieldMap["email"] = u.Email
	u.fieldMap["user_status"] = u.UserStatus
	u.fieldMap["avatar"] = u.Avatar
	u.fieldMap["description"] = u.Description
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u usersTable) clone(db *gorm.DB) usersTable {
	u.usersTableDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u usersTable) replaceDB(db *gorm.DB) usersTable {
	u.usersTableDo.ReplaceDB(db)
	return u
}

type usersTableDo struct{ gen.DO }

type IUsersTableDo interface {
	gen.SubQuery
	Debug() IUsersTableDo
	WithContext(ctx context.Context) IUsersTableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUsersTableDo
	WriteDB() IUsersTableDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUsersTableDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUsersTableDo
	Not(conds ...gen.Condition) IUsersTableDo
	Or(conds ...gen.Condition) IUsersTableDo
	Select(conds ...field.Expr) IUsersTableDo
	Where(conds ...gen.Condition) IUsersTableDo
	Order(conds ...field.Expr) IUsersTableDo
	Distinct(cols ...field.Expr) IUsersTableDo
	Omit(cols ...field.Expr) IUsersTableDo
	Join(table schema.Tabler, on ...field.Expr) IUsersTableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUsersTableDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUsersTableDo
	Group(cols ...field.Expr) IUsersTableDo
	Having(conds ...gen.Condition) IUsersTableDo
	Limit(limit int) IUsersTableDo
	Offset(offset int) IUsersTableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersTableDo
	Unscoped() IUsersTableDo
	Create(values ...*model.UsersTable) error
	CreateInBatches(values []*model.UsersTable, batchSize int) error
	Save(values ...*model.UsersTable) error
	First() (*model.UsersTable, error)
	Take() (*model.UsersTable, error)
	Last() (*model.UsersTable, error)
	Find() ([]*model.UsersTable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UsersTable, err error)
	FindInBatches(result *[]*model.UsersTable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UsersTable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUsersTableDo
	Assign(attrs ...field.AssignExpr) IUsersTableDo
	Joins(fields ...field.RelationField) IUsersTableDo
	Preload(fields ...field.RelationField) IUsersTableDo
	FirstOrInit() (*model.UsersTable, error)
	FirstOrCreate() (*model.UsersTable, error)
	FindByPage(offset int, limit int) (result []*model.UsersTable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUsersTableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u usersTableDo) Debug() IUsersTableDo {
	return u.withDO(u.DO.Debug())
}

func (u usersTableDo) WithContext(ctx context.Context) IUsersTableDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u usersTableDo) ReadDB() IUsersTableDo {
	return u.Clauses(dbresolver.Read)
}

func (u usersTableDo) WriteDB() IUsersTableDo {
	return u.Clauses(dbresolver.Write)
}

func (u usersTableDo) Session(config *gorm.Session) IUsersTableDo {
	return u.withDO(u.DO.Session(config))
}

func (u usersTableDo) Clauses(conds ...clause.Expression) IUsersTableDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u usersTableDo) Returning(value interface{}, columns ...string) IUsersTableDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u usersTableDo) Not(conds ...gen.Condition) IUsersTableDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u usersTableDo) Or(conds ...gen.Condition) IUsersTableDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u usersTableDo) Select(conds ...field.Expr) IUsersTableDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u usersTableDo) Where(conds ...gen.Condition) IUsersTableDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u usersTableDo) Order(conds ...field.Expr) IUsersTableDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u usersTableDo) Distinct(cols ...field.Expr) IUsersTableDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u usersTableDo) Omit(cols ...field.Expr) IUsersTableDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u usersTableDo) Join(table schema.Tabler, on ...field.Expr) IUsersTableDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u usersTableDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUsersTableDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u usersTableDo) RightJoin(table schema.Tabler, on ...field.Expr) IUsersTableDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u usersTableDo) Group(cols ...field.Expr) IUsersTableDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u usersTableDo) Having(conds ...gen.Condition) IUsersTableDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u usersTableDo) Limit(limit int) IUsersTableDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u usersTableDo) Offset(offset int) IUsersTableDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u usersTableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersTableDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u usersTableDo) Unscoped() IUsersTableDo {
	return u.withDO(u.DO.Unscoped())
}

func (u usersTableDo) Create(values ...*model.UsersTable) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u usersTableDo) CreateInBatches(values []*model.UsersTable, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u usersTableDo) Save(values ...*model.UsersTable) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u usersTableDo) First() (*model.UsersTable, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersTable), nil
	}
}

func (u usersTableDo) Take() (*model.UsersTable, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersTable), nil
	}
}

func (u usersTableDo) Last() (*model.UsersTable, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersTable), nil
	}
}

func (u usersTableDo) Find() ([]*model.UsersTable, error) {
	result, err := u.DO.Find()
	return result.([]*model.UsersTable), err
}

func (u usersTableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UsersTable, err error) {
	buf := make([]*model.UsersTable, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u usersTableDo) FindInBatches(result *[]*model.UsersTable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u usersTableDo) Attrs(attrs ...field.AssignExpr) IUsersTableDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u usersTableDo) Assign(attrs ...field.AssignExpr) IUsersTableDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u usersTableDo) Joins(fields ...field.RelationField) IUsersTableDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u usersTableDo) Preload(fields ...field.RelationField) IUsersTableDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u usersTableDo) FirstOrInit() (*model.UsersTable, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersTable), nil
	}
}

func (u usersTableDo) FirstOrCreate() (*model.UsersTable, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersTable), nil
	}
}

func (u usersTableDo) FindByPage(offset int, limit int) (result []*model.UsersTable, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u usersTableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u usersTableDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u usersTableDo) Delete(models ...*model.UsersTable) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *usersTableDo) withDO(do gen.Dao) *usersTableDo {
	u.DO = *do.(*gen.DO)
	return u
}
