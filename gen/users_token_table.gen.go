// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/colinrs/prompthub/model"
)

func newUsersTokenTable(db *gorm.DB, opts ...gen.DOOption) usersTokenTable {
	_usersTokenTable := usersTokenTable{}

	_usersTokenTable.usersTokenTableDo.UseDB(db, opts...)
	_usersTokenTable.usersTokenTableDo.UseModel(&model.UsersTokenTable{})

	tableName := _usersTokenTable.usersTokenTableDo.TableName()
	_usersTokenTable.ALL = field.NewAsterisk(tableName)
	_usersTokenTable.ID = field.NewInt32(tableName, "id")
	_usersTokenTable.UserID = field.NewInt32(tableName, "user_id")
	_usersTokenTable.PreRefreshToken = field.NewString(tableName, "pre_refresh_token")
	_usersTokenTable.RefreshToken = field.NewString(tableName, "refresh_token")
	_usersTokenTable.CreatedAt = field.NewTime(tableName, "created_at")
	_usersTokenTable.UpdatedAt = field.NewTime(tableName, "updated_at")
	_usersTokenTable.DeletedAt = field.NewField(tableName, "deleted_at")

	_usersTokenTable.fillFieldMap()

	return _usersTokenTable
}

type usersTokenTable struct {
	usersTokenTableDo

	ALL             field.Asterisk
	ID              field.Int32
	UserID          field.Int32
	PreRefreshToken field.String
	RefreshToken    field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field

	fieldMap map[string]field.Expr
}

func (u usersTokenTable) Table(newTableName string) *usersTokenTable {
	u.usersTokenTableDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u usersTokenTable) As(alias string) *usersTokenTable {
	u.usersTokenTableDo.DO = *(u.usersTokenTableDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *usersTokenTable) updateTableName(table string) *usersTokenTable {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.UserID = field.NewInt32(table, "user_id")
	u.PreRefreshToken = field.NewString(table, "pre_refresh_token")
	u.RefreshToken = field.NewString(table, "refresh_token")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *usersTokenTable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *usersTokenTable) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["pre_refresh_token"] = u.PreRefreshToken
	u.fieldMap["refresh_token"] = u.RefreshToken
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u usersTokenTable) clone(db *gorm.DB) usersTokenTable {
	u.usersTokenTableDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u usersTokenTable) replaceDB(db *gorm.DB) usersTokenTable {
	u.usersTokenTableDo.ReplaceDB(db)
	return u
}

type usersTokenTableDo struct{ gen.DO }

type IUsersTokenTableDo interface {
	gen.SubQuery
	Debug() IUsersTokenTableDo
	WithContext(ctx context.Context) IUsersTokenTableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUsersTokenTableDo
	WriteDB() IUsersTokenTableDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUsersTokenTableDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUsersTokenTableDo
	Not(conds ...gen.Condition) IUsersTokenTableDo
	Or(conds ...gen.Condition) IUsersTokenTableDo
	Select(conds ...field.Expr) IUsersTokenTableDo
	Where(conds ...gen.Condition) IUsersTokenTableDo
	Order(conds ...field.Expr) IUsersTokenTableDo
	Distinct(cols ...field.Expr) IUsersTokenTableDo
	Omit(cols ...field.Expr) IUsersTokenTableDo
	Join(table schema.Tabler, on ...field.Expr) IUsersTokenTableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUsersTokenTableDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUsersTokenTableDo
	Group(cols ...field.Expr) IUsersTokenTableDo
	Having(conds ...gen.Condition) IUsersTokenTableDo
	Limit(limit int) IUsersTokenTableDo
	Offset(offset int) IUsersTokenTableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersTokenTableDo
	Unscoped() IUsersTokenTableDo
	Create(values ...*model.UsersTokenTable) error
	CreateInBatches(values []*model.UsersTokenTable, batchSize int) error
	Save(values ...*model.UsersTokenTable) error
	First() (*model.UsersTokenTable, error)
	Take() (*model.UsersTokenTable, error)
	Last() (*model.UsersTokenTable, error)
	Find() ([]*model.UsersTokenTable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UsersTokenTable, err error)
	FindInBatches(result *[]*model.UsersTokenTable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UsersTokenTable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUsersTokenTableDo
	Assign(attrs ...field.AssignExpr) IUsersTokenTableDo
	Joins(fields ...field.RelationField) IUsersTokenTableDo
	Preload(fields ...field.RelationField) IUsersTokenTableDo
	FirstOrInit() (*model.UsersTokenTable, error)
	FirstOrCreate() (*model.UsersTokenTable, error)
	FindByPage(offset int, limit int) (result []*model.UsersTokenTable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUsersTokenTableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u usersTokenTableDo) Debug() IUsersTokenTableDo {
	return u.withDO(u.DO.Debug())
}

func (u usersTokenTableDo) WithContext(ctx context.Context) IUsersTokenTableDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u usersTokenTableDo) ReadDB() IUsersTokenTableDo {
	return u.Clauses(dbresolver.Read)
}

func (u usersTokenTableDo) WriteDB() IUsersTokenTableDo {
	return u.Clauses(dbresolver.Write)
}

func (u usersTokenTableDo) Session(config *gorm.Session) IUsersTokenTableDo {
	return u.withDO(u.DO.Session(config))
}

func (u usersTokenTableDo) Clauses(conds ...clause.Expression) IUsersTokenTableDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u usersTokenTableDo) Returning(value interface{}, columns ...string) IUsersTokenTableDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u usersTokenTableDo) Not(conds ...gen.Condition) IUsersTokenTableDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u usersTokenTableDo) Or(conds ...gen.Condition) IUsersTokenTableDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u usersTokenTableDo) Select(conds ...field.Expr) IUsersTokenTableDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u usersTokenTableDo) Where(conds ...gen.Condition) IUsersTokenTableDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u usersTokenTableDo) Order(conds ...field.Expr) IUsersTokenTableDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u usersTokenTableDo) Distinct(cols ...field.Expr) IUsersTokenTableDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u usersTokenTableDo) Omit(cols ...field.Expr) IUsersTokenTableDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u usersTokenTableDo) Join(table schema.Tabler, on ...field.Expr) IUsersTokenTableDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u usersTokenTableDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUsersTokenTableDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u usersTokenTableDo) RightJoin(table schema.Tabler, on ...field.Expr) IUsersTokenTableDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u usersTokenTableDo) Group(cols ...field.Expr) IUsersTokenTableDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u usersTokenTableDo) Having(conds ...gen.Condition) IUsersTokenTableDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u usersTokenTableDo) Limit(limit int) IUsersTokenTableDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u usersTokenTableDo) Offset(offset int) IUsersTokenTableDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u usersTokenTableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUsersTokenTableDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u usersTokenTableDo) Unscoped() IUsersTokenTableDo {
	return u.withDO(u.DO.Unscoped())
}

func (u usersTokenTableDo) Create(values ...*model.UsersTokenTable) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u usersTokenTableDo) CreateInBatches(values []*model.UsersTokenTable, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u usersTokenTableDo) Save(values ...*model.UsersTokenTable) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u usersTokenTableDo) First() (*model.UsersTokenTable, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersTokenTable), nil
	}
}

func (u usersTokenTableDo) Take() (*model.UsersTokenTable, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersTokenTable), nil
	}
}

func (u usersTokenTableDo) Last() (*model.UsersTokenTable, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersTokenTable), nil
	}
}

func (u usersTokenTableDo) Find() ([]*model.UsersTokenTable, error) {
	result, err := u.DO.Find()
	return result.([]*model.UsersTokenTable), err
}

func (u usersTokenTableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UsersTokenTable, err error) {
	buf := make([]*model.UsersTokenTable, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u usersTokenTableDo) FindInBatches(result *[]*model.UsersTokenTable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u usersTokenTableDo) Attrs(attrs ...field.AssignExpr) IUsersTokenTableDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u usersTokenTableDo) Assign(attrs ...field.AssignExpr) IUsersTokenTableDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u usersTokenTableDo) Joins(fields ...field.RelationField) IUsersTokenTableDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u usersTokenTableDo) Preload(fields ...field.RelationField) IUsersTokenTableDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u usersTokenTableDo) FirstOrInit() (*model.UsersTokenTable, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersTokenTable), nil
	}
}

func (u usersTokenTableDo) FirstOrCreate() (*model.UsersTokenTable, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UsersTokenTable), nil
	}
}

func (u usersTokenTableDo) FindByPage(offset int, limit int) (result []*model.UsersTokenTable, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u usersTokenTableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u usersTokenTableDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u usersTokenTableDo) Delete(models ...*model.UsersTokenTable) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *usersTokenTableDo) withDO(do gen.Dao) *usersTokenTableDo {
	u.DO = *do.(*gen.DO)
	return u
}
