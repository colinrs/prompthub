syntax = "v1"

import "prompt.api"

@server (
	group:      user
	prefix:     /api/v1/user
	middleware: UserLoginMiddleware
)
service prompthub-api {
	@handler updateUser
	put /update_profile (UpdateUserRequest)

	@handler changePassword
	put /change_password (ChangePasswordRequest)

	@handler logout
	get /logout

	@handler refreshToken
	get /refresh_token (RefreshTokenRequeste) returns (RefreshTokenResponse)

	@handler getUserSavePrompts
	get /prompts/save returns (UserPromptsResponse)

	@handler getUserLikePrompts
	get /prompts/like returns (UserPromptsResponse)

	@handler getUserPromptsList
	get /prompt/list returns (UserPromptsResponse)
}

@server (
	group:      user
	prefix:     /api/v1/user
	middleware: UserNonLoginMiddleware
)
service prompthub-api {
	@handler registerUser
	post /register (RegisterUserRequest) returns (LoginResponse)

	@handler login
	post /login (LoginRequest) returns (LoginResponse)

	@handler SendVerificationCode
	post /send_verification_code (SendVerificationCodeRequest) returns (SendVerificationCodeResponse)

	@handler VerificationCode
	get /verification_code (VerificationCodeRequest) returns (VerificationCodeResponse)

	@handler ResetPassword
	post /reset_password (ResetPasswordRequest) returns (ResetPasswordResponse)

	@handler ForgotPassword
	post /forgot_password (ForgotPasswordnRequest) returns (ForgotPasswordnResponse)
}

type ForgotPasswordnRequest {
	Email string `json:"email" validate:"required,email,max=100"`
}

type ForgotPasswordnResponse {}

type VerificationCodeRequest {
	Code  string `form:"code" validate:"required,min=6"`
	Email string `form:"email" validate:"required,email,max=100"`
}

type VerificationCodeResponse {}

type ResetPasswordRequest {
	Email       string `json:"email" validate:"required,email,max=100"`
	Code        string `json:"code" validate:"required,max=6"`
	NewPassword string `json:"newPassword" validate:"required,min=6"`
}

type ResetPasswordResponse {
	Message string `json:"message"`
}

type SendVerificationCodeRequest {
	Email string `json:"email" validate:"required,email,max=100"`
	Event string `json:"event" validate:"required,oneof=forgotPassword emailVerification"`
}

type SendVerificationCodeResponse {}

type RegisterUserRequest {
	Name     string `json:"name" validate:"max=50"`
	Password string `json:"password" validate:"min=6"`
	Email    string `json:"email" validate:"email,max=80"`
}

type UpdateUserRequest {
	Name   string `json:"name,optional" validate:"omitempty,max=50"`
	Avatar string `json:"avatar" validate:"omitempty,max=300"`
}

type ChangePasswordRequest {
	OldPassword string `json:"oldPassword" validate:"required,max=30"`
	NewPassword string `json:"newPassword" validate:"required,max=30"`
}

type LoginRequest {
	Email    string `json:"email" validate:"required,max=50,email"`
	Password string `json:"password" validate:"required,max=30,min=6"`
}

type LoginResponse {
	UserId    uint   `json:"userId"`
	Name      string `json:"name"`
	Email     string `json:"email"`
	Avatar    string `json:"avatar"`
	Token     string `json:"token"`
	ExpiredAt int64  `json:"expireAt"`
}

type RefreshTokenRequeste {
	Token string `json:"token"`
}

type RefreshTokenResponse {
	Token     string `json:"token"`
	ExpiredAt int64  `json:"expireAt"`
}

type UserPromptsResponse {
	List     []Prompt `json:"list"`
	Page     int      `json:"page"`
	PageSize int      `json:"pageSize"`
	Total    int      `json:"total"`
}

